/** 
<!-- backups for: header html component  -->
<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand">DANNY</a>
    </div>
    <div class="collapse navbar-collapse" id="myNavbar">
      <ul class="nav navbar-nav">
        <li>
          <a [routerLink]="['/report']"
            ><span class="glyphicon glyphicon"></span>REPORT</a
          >
        </li>
      </ul>
      <ul class="nav navbar-nav navbar-right">
        <li>
          <a
            [routerLink]="['/login']"
            *ngIf="!loginService.isLoggedIn()"
            routerLinkActive="active"
            ><span class="glyphicon glyphicon-user"></span> Sign Up</a
          >
        </li>
        <li>
          <a
            [routerLink]="['/login']"
            *ngIf="!loginService.isLoggedIn()"
            routerLinkActive="active"
            ><span class="glyphicon glyphicon-log-in"></span> Login</a
          >
        </li>

        <li>
          <a
            class="nav-link"
            style="cursor: pointer"
            *ngIf="loginService.isLoggedIn()"
            (click)="loginService.logout()"
          >
            Logout</a
          >
        </li>
      </ul>
    </div>
  </div>
</nav>

<!-- backups for:  -->
 #231557 0%,
    #44107a 29%,
    #ff1361 67%,
    #fff800 100%



    <!-- report component -->

    import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { Report } from './report.model';
import { ReportService } from './report.service';
import { HttpEvent, HttpEventType } from '@angular/common/http';

@Component({
  selector: 'app-report',
  templateUrl: './report.component.html',
  styleUrls: ['./report.component.scss'],
})
export class ReportComponent implements OnInit, OnDestroy {
  preview!: string;
  percentDone: any = 0;
users : any = [];

  reportForm!: FormGroup;
  subscription!: Subscription;
  mydata: Report[] = [];
  constructor(
    public formBuilder: FormBuilder,
    public reportService: ReportService,
    public router: Router
  ) {}

  @ViewChild('fileinput', { static: false }) fileinput!: ElementRef;
  ngOnInit(): void {
    this.reportForm = this.formBuilder.group({
      title: ['', Validators.required],
      description: ['', Validators.required],
      imageName: ['', Validators.required],
      imageUrl: [null, Validators.required],
      postedBy: ['', Validators.required],
      createdAt: [Date, Validators.required],
    });
  }

  // Image Preview
  // uploadFile(event: any) {
  //   const file = (event.target as HTMLInputElement).files[0];
  //   this.reportForm.patchValue({
  //     images: file,
  //   });
  //   this.reportForm.get('images')?.updateValueAndValidity();
  //   // File Preview
  //   const reader = new FileReader();
  //   reader.onload = () => {
  //     this.preview = reader.result as string;
  //   };
  //   reader.readAsDataURL(file);
  // }

  // onReport() {
  //   console.log('true/false=> this.reportForm.valid', this.reportForm.valid);
  //   if (this.reportForm.valid) {
  //     this.subscription = this.reportService
  //       .createReport(
  //         this.reportForm.value.title,
  //         this.reportForm.value.
  //         )
  //       .subscribe((res) => {
  //         console.log('hello', res);
  //         localStorage.setItem('report', JSON.stringify(res));
  //       });
  //   } else {
  //     //back to error message
  //     console.log(false);
  //   }

  //   // const reportFile = this.fileinput.nativeElement.files[0];
  //   // const file = new FormData();
  //   // this.reportService.makeReport(reportForm)
  // }

  onReport(): void {
    this.reportService
      .createReport(
        this.reportForm.value.title,
        this.reportForm.value.description,
        this.reportForm.value.imageName,
        this.reportForm.value.imageUrl,
        this.reportForm.value.createdAt,
        // this.reportForm.value.postedBy
      )
      .subscribe((event: HttpEvent<any>) => {
        switch (event.type) {
          case HttpEventType.Sent:
            console.log('Request has been made!');
            break;
          case HttpEventType.ResponseHeader:
            console.log('Response header has been received!');
            break;
          case HttpEventType.UploadProgress:
            this.percentDone = Math.round((event.loaded / event.type) * 100);
            console.log(`Uploaded! ${this.percentDone}%`);
            break;
          case HttpEventType.Response:
            console.log('User successfully created!', event.body);
            this.percentDone = false;
            this.router.navigate(['profile']);
        }
      });
  }

  ngOnDestroy(): void {
    if (!this.subscription) {
      return;
    } else {
      this.subscription?.unsubscribe();
    }
  }
}
// title: string;
  // description: string;
  // imageName: string;
  // images: File;
  // createdAt: Date;
  // postedBy: string;

//SOME CHANGES FOR TESTING PURPOSE

  <!-- reportService -->


  import { HttpClient, HttpHeaders } from "@angular/common/http"
import { Injectable } from "@angular/core"
import { Observable } from 'rxjs';
import { Report } from "./report.model";

@Injectable()
export class ReportService {
  private REPORT_URL = 'http://localhost:8088/report';
  private headers = new HttpHeaders().set('Content-Type', 'application/json');

  constructor(private http: HttpClient) {}

  createReport(
    title: string,
    description: string,
    imageName: string,
    imageUrl: File,
    // createdAt: Date,
    postedBy: string
  ): Observable<any> {
    const formData = new FormData();
    formData.append('title', title);
    formData.append('description', description);
    formData.append('imageName', imageName);
    formData.append('imageUrl', imageUrl);
    // formData.append('createdAt', createdAt);
    formData.append('postedBy', postedBy);
    return this.http.post<Report[]>(this.REPORT_URL, formData, {
      reportProgress: true,
      observe: 'events',
    });
  }

  getReports(): Observable<Report> {
    return this.http.get<Report>(this.REPORT_URL);
  }
}


  // title: string;
  // description: string;
  // imageName: string;
  // images: File;
  // createdAt: Date;
  // postedBy: string;


/**
 * pipeline {

    agent any

    stages {

        stage("build"){
           steps {
            //changes
           }
        }
        stage("test"){
            when {
              expression {
                  // TODO:
              }
            }
            steps{

            }

        }
        stage("deploy"){
         steps {

         }
        }
    }
}
 */


//bootstrap card
// <div class="card mb-3" style="max-width: 540px;">
//   <div class="row no-gutters">
//     <div class="col-md-4">
//       <img src="..." class="card-img" alt="...">
//     </div>
//     <div class="col-md-8">
//       <div class="card-body">
//         <h5 class="card-title">Card title</h5>
//         <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
//         <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
//       </div>
//     </div>
//   </div>
// </div>